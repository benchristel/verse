- button and API to clear log
- some way to implement waitForCharOrTimeout - maybe an effect
  that simulates a keypress? Maybe a startSkippableAnimation effect?
- when a stack frame pops, call its renderer before destroying it,
  or some stuff might not get rendered
- When a file changes and is eval'd successfully, functions
  that it no longer defines should be removed from the
  window.

- Minimize the security risk of evaling code from localStorage
  when the page loads.

- prevent the eval'd script from accessing `window` or any
  properties on `window`. Always bind `this` when calling
  app functions (strict mode defaults `this` to undefined).
  Eval'd code can access `window` anyway, by doing this:
  (x => x('this'))(eval)

- errors thrown from the program should be logged.

- change "Run" to "Restart" while the program is running.

- add a "Cancel" button that cancels the current I/O wait,
  and causes it to return a special sentinel value.

- save/load

let animation = skippableAnimation(function*() => {

})

yield start(animation)
yield waitForChar()
yield skipToEnd(animation)
