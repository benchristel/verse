# BUGS

- render display as soon as startdisplay and startInputDisplay are called
- disable Cmd+L "go to line number" hotkey - it's very
  surprising if you're expecting Cmd+L to focus the URL bar.
- disable "run" button when "can't run" is shown

# HIGH-RISK FEATURES

- make buttons created by `yield options()` clickable

# UX CONCERNS

- refresh the display when the code changes in the editor so
  live updating will work
- Errors thrown from app code shouldn't crash the editor. Wrap
  all calls to user-defined functions in try/catch
- `log()` should actually print to the log. You shouldn't have to
  yield it, because people want to log from everywhere, not
  just generator functions.
- display a warning when the user edits code with MemoryStorage
  active, telling them their changes won't be saved
- change "Run" to "Restart" while the program is running.
- move run button to the top of the screen. Add a big fat
  "play" icon in the center when nothing is running.
- clear the display and log when a program exits. Currently,
  it's hard to tell whether the program is still running.
- errors thrown from the program should be logged.

# LOW-RISK FEATURES

- test framework
  define({
    "test something blah blah": () => {
      check(1 + 1, isNumber)
    },
  })
- button and API to clear log
- save/load

# BREAKING CHANGES

- rename reducer to updater
- remove typechecking from state and add it (as an option/suggestion)
  to action creators. Tests can cover updaters, as long as the
  actions being sent to the updater are sane.

# ICEBOX

- add a "Cancel" button that cancels the current I/O wait,
  and causes it to return a special sentinel value.
- some way to implement waitForCharOrTimeout - maybe an effect
  that simulates a keypress? Maybe a startSkippableAnimation effect?
  ```
  let animation = skippableAnimation(function*() => {

  })

  yield start(animation)
  yield waitForChar()
  yield skipToEnd(animation)
  ```
- prevent the eval'd script from accessing `window` or any
  properties on `window`. Always bind `this` when calling
  app functions (strict mode defaults `this` to undefined).
  Eval'd code can access `window` anyway, by doing this:
  (x => x('this'))(eval)
- Minimize the security risk of evaling code from localStorage
  when the page loads.
