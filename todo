- license
- code of conduct

// deployment status
//  (-_-)   - not checking (grey)
// 「(°ヘ°)? - syntax error, early runtime error (red)
//  \(^_^)/ - syntax, runtime, tests ok (blue-green)
//  /(.__.) - test failure (yellow)

// app status
// grey - not running     _/_ (open switch)    [RUN]
// blue-green - running   ___ (closed switch)  [RESTART]
// blue-green - running   •__ ("unsaved" dot)  [RESTART]
// black - crashed         X                   [RESTART]


# User feedback

- s/new tab/new window — instruct the user to right click
- explain nonsignificance of whitespace earlier

# BUGS

- disable Cmd+L "go to line number" hotkey - it's very
  surprising if you're expecting Cmd+L to focus the URL bar.
- disable "run" button when "can't run" is shown
- rewrite pico-fermi-bagel to work with the new API
- latent bug: once multiple files are supported, what will happen
  if some files have syntax errors when Verse first starts?
  How will those errors be reported to the user? One way of
  avoiding this is to only save files that eval successfully.

# HIGH-RISK FEATURES

- make buttons created by `yield options()` clickable

# UX CONCERNS

- provide a better means of hiding the display pane. startDisplay(() => [])
  should show the display but print nothing.
- Errors thrown from app code shouldn't crash the editor. Wrap
  all calls to user-defined functions in try/catch
- display an error when the user creates one effect object
  but yields a different one (the most likely scenario is
  that they forgot to yield the first effect).
- display a warning when the user edits code with MemoryStorage
  active, telling them their changes won't be saved
- change "Run" to "Restart" while the program is running.
- clear the display and log when a program exits. Currently,
  it's hard to tell whether the program is still running.
- highlight locations of syntax errors with
  ```
  .myMarker {
      background: #fcc;
      position: absolute;
      border-radius: 1em;
  }

  import Ace from 'brace'
  const AceRange = Ace.acequire('ace/range').Range
  session.addMarker(new AceRange(1, 4, 2, 10), "myMarker");
  ```


# LOW-RISK FEATURES

- test framework
  define({
    "test something blah blah": () => {
      check(1 + 1, isNumber)
    },
  })
- button and API to clear log
- save/load
- create a `debug()` function that prints to the log and
  doesn't have to be yielded
- Add a big fat "play" icon in the center when nothing is running.
- Run app code in strict mode

# BREAKING CHANGES

- rename reducer to updater

# ICEBOX

- add a "Cancel" button that cancels the current I/O wait,
  and causes it to return a special sentinel value.
- some way to implement waitForCharOrTimeout - maybe an effect
  that simulates a keypress? Maybe a startSkippableAnimation effect?
  ```
  let animation = skippableAnimation(function*() => {

  })

  yield start(animation)
  yield waitForChar()
  yield skipToEnd(animation)
  ```
- prevent the eval'd script from accessing `window` or any
  properties on `window`. Always bind `this` when calling
  app functions (strict mode defaults `this` to undefined).
  Eval'd code can access `window` anyway, by doing this:
  (x => x('this'))(eval)
- Minimize the security risk of evaling code from localStorage
  when the page loads.
