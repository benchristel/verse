import { action } from './action'

describe('action', () => {
  it('returns a function', () => {
    expect(typeof action()).toBe('function')
  })

  it('is on the window object', () => {
    expect(window.action).toBe(action)
  })
})

describe('the function returned by action()', () => {
  it('creates an object whose type property is the function', () => {
    let theAction = action()
    expect(theAction().type).toBe(theAction)
  })

  it('assigns its arguments to properties on the object', () => {
    let theAction = action('foo', 'bar', 'baz')
    expect(theAction(1, 2, 3)).toEqual({
      type: theAction,
      foo: 1,
      bar: 2,
      baz: 3
    })
  })

  it('ignores extra arguments', () => {
    let theAction = action('foo')
    expect(theAction(1, 2)).toEqual({
      type: theAction,
      foo: 1
    })
  })

  it('sets properties for missing arguments to undefined', () => {
    let theAction = action('foo', 'bar')
    expect(theAction(1)).toEqual({
      type: theAction,
      foo: 1,
      bar: undefined
    })
  })

  it('overrides any user-defined "type" property', () => {
    let theAction = action('type')
    expect(theAction(1).type).toBe(theAction)
  })

  it('is marked as generated by Verse', () => {
    expect(action().generatedByVerse).toBe(true)
  })
})
